# The 'version' tag is obsolete in modern Docker Compose and has been removed.
services:
  # --------------------------------------------------------------------
  # KONG & KONGA INFRASTRUCTURE (Unchanged)
  # --------------------------------------------------------------------
  kong_main_db_instance:
    image: postgres:13
    container_name: kong_main_db_instance
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations-job:
    image: kong:3.6
    container_name: kong-migrations-job
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong_main_db_instance
      KONG_PG_PASSWORD: kong
      KONG_PASSWORD: kong
    depends_on:
      - kong_main_db_instance
    networks:
      - app-network
    restart: on-failure

  kong-gateway-instance:
    image: kong:3.6
    container_name: kong-gateway-instance
    restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong_main_db_instance
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      - kong-migrations-job
    networks:
      - app-network

  konga_main_db_instance:
    image: postgres:11
    container_name: konga_main_db_instance
    restart: always
    environment:
      POSTGRES_USER: konga
      POSTGRES_DB: konga_db
      POSTGRES_PASSWORD: konga
    ports:
      - "5434:5432"
    networks:
      - app-network
    volumes:
      - konga_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U konga"]
      interval: 5s
      timeout: 5s
      retries: 10

  konga-ui-instance:
    image: pantsel/konga:latest
    container_name: konga-ui-instance
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: konga_main_db_instance
      DB_PORT: 5432
      DB_USER: konga
      DB_PASSWORD: konga
      DB_DATABASE: konga_db
      NODE_ENV: development
      TOKEN_SECRET: UnSecretFortEtUniquePourKonga
    ports:
      - "1337:1337"
    depends_on:
      - kong-gateway-instance
      - konga_main_db_instance
    networks:
      - app-network

  # --------------------------------------------------------------------
  # ML & DATA INFRASTRUCTURE (Unchanged)
  # --------------------------------------------------------------------
  airflow_db_instance:
    image: postgres:13
    container_name: airflow_db_instance
    restart: always
    environment:
      POSTGRES_USER: airflow_user
      POSTGRES_DB: airflow_db
      POSTGRES_PASSWORD: airflow_pass
    ports:
      - "5435:5432"
    networks:
      - app-network
    volumes:
      - airflow_db_data:/var/lib/postgresql/data

  mlflow_db:
    image: postgres:13
    container_name: mlflow_postgres_db
    restart: always
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: mlflow_user
      POSTGRES_PASSWORD: mlflow_password
      POSTGRES_DB: mlflow_db
    volumes:
      - mlflow_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    container_name: mlflow_minio_store
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

  mlflow_server:
    image: ghcr.io/mlflow/mlflow:v2.12.1
    container_name: mlflow_tracking_server
    restart: always
    ports:
      - "5000:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://mlflow_user:mlflow_password@mlflow_db:5432/mlflow_db
      MLFLOW_ARTIFACTS_DESTINATION: s3://mlflow-artifacts/
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri "$${MLFLOW_BACKEND_STORE_URI}"
      --artifacts-destination "$${MLFLOW_ARTIFACTS_DESTINATION}"
    depends_on:
      - mlflow_db
      - minio
    networks:
      - app-network

  airflow-init-job:
    image: apache/airflow:2.9.1
    container_name: airflow-init-job
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create -r Admin -u admin -p admin -f admin -l user -e admin@example.com"
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass@airflow_db_instance:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    depends_on:
      - airflow_db_instance
    networks:
      - app-network
    restart: on-failure

  airflow-webserver-instance:
    # Airflow build context is '.', which is correct since its files are inside kong-stack
    build:
      context: .
      dockerfile: Airflow.Dockerfile
    container_name: airflow-webserver-instance
    restart: always
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass@airflow_db_instance:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      MLFLOW_TRACKING_URI: http://mlflow_server:5000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    ports:
      - "8080:8080"
    command: webserver
    depends_on:
      - airflow-init-job
    networks:
      - app-network
    volumes:
      - ./airflow_files/dags:/opt/airflow/dags
      - ./airflow_files/logs:/opt/airflow/logs
      - ./airflow_files/plugins:/opt/airflow/plugins

  airflow-scheduler-instance:
    build:
      context: .
      dockerfile: Airflow.Dockerfile
    container_name: airflow-scheduler-instance
    restart: always
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass@airflow_db_instance:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      MLFLOW_TRACKING_URI: http://mlflow_server:5000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    command: scheduler
    depends_on:
      - airflow-webserver-instance
    networks:
      - app-network
    volumes:
      - ./airflow_files/dags:/opt/airflow/dags
      - ./airflow_files/logs:/opt/airflow/logs
      - ./airflow_files/plugins:/opt/airflow/plugins

  # --------------------------------------------------------------------
  # NEW ML SCORING MICROSERVICES (CORRECTED PATHS)
  # --------------------------------------------------------------------
  bank_ml_scorer:
    build:
      context: ..
      dockerfile: ./services/MLscorer.Dockerfile
    container_name: bank_ml_scorer
    command: uvicorn services.bank_MLscorer.app:app --host 0.0.0.0 --port 5004 --reload
    env_file:
      - ../services/bank_MLscorer/.env
    ports:
      - "5004:5004"
    volumes:
      - ../services:/app/services
    networks:
      - app-network
    depends_on:
      - mlflow_server
    restart: always

  ecommerce_ml_scorer:
    build:
      context: ..
      dockerfile: ./services/MLscorer.Dockerfile
    container_name: ecommerce_ml_scorer
    command: uvicorn services.ecommerce_MLscorer.app:app --host 0.0.0.0 --port 5002 --reload
    env_file:
      - ../services/ecommerce_MLscorer/.env
    ports:
      - "5002:5002"
    volumes:
      - ../services:/app/services
    networks:
      - app-network
    depends_on:
      - mlflow_server
    restart: always

  mobile_money_ml_scorer:
    build:
      context: ..
      dockerfile: ./services/MLscorer.Dockerfile
    container_name: mobile_money_ml_scorer
    command: uvicorn services.mobile_money_MLscorer.app:app --host 0.0.0.0 --port 5001 --reload
    env_file:
      - ../services/mobile_money_MLscorer/.env
    ports:
      - "5001:5001"
    volumes:
      - ../services:/app/services
    networks:
      - app-network
    depends_on:
      - mlflow_server
    restart: always

  # --------------------------------------------------------------------
  # NEW PORTAL & CONFIGURATION SERVICE (CORRECTED PATHS)
  # --------------------------------------------------------------------
  portal_db:
    image: postgres:14-alpine
    container_name: portal_db
    restart: always
    environment:
      - POSTGRES_USER=portal_user
      - POSTGRES_PASSWORD=portal_password
      - POSTGRES_DB=portal_database
    ports:
      - "5437:5432"
    volumes:
      - portal_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portal_user -d portal_database"]
      interval: 10s
      timeout: 5s
      retries: 5

# In kong-stack/docker-compose.yml

  portal_api:
    build:
      context: ..  # CORRECT: The build context is the parent directory (api_detection_fraude)
      dockerfile: services/portal_api/Dockerfile # CORRECT: The path to the Dockerfile from the context
    container_name: portal_api
    volumes:
      # CORRECT: Go up one level, then down to services/portal_api
      - ../services/portal_api:/code/portal_api
    env_file:
      # CORRECT: Go up one level, then down to the .env file
      - ../services/portal_api/.env
    ports:
      - "5003:5003"
    networks:
      - app-network
    depends_on:
      portal_db:
        condition: service_healthy
      kong-gateway-instance:
        condition: service_started
    restart: always
# --------------------------------------------------------------------
# VOLUMES & NETWORKS
# --------------------------------------------------------------------
volumes:
  kong_data:
  konga_data:
  airflow_db_data:
  mlflow_db_data:
  minio_data:
  portal_db_data:

networks:
  app-network:
    driver: bridge